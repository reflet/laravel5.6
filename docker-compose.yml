#
# server build.
# ex) $ docker-compose build --no-cache
#
# server start.
# ex) $ docker-compose up -d
#
version: '3'
services:
  httpd:
    image: my-laravel5.6/apache:2.4
    build: ./docker/httpd/
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./src:/var/www/www.example.com:cached

  php:
    image: my-laravel5.6/php:7.3
    build:
      context: ./
      dockerfile: ./docker/php/Dockerfile
    tty: true
    ports:
      - '9000:9000'
    volumes:
      - src:/var/www/www.example.com:cached
      - vendor:/var/www/www.example.com/vendor
      - node_modules:/var/www/www.example.com/node_modules
    depends_on:
      - mysql

  cron:
    image: my-laravel5.6/cron:7.3
    build:
      context: ./
      dockerfile: ./docker/cron/Dockerfile
    tty: true
    volumes:
      - src:/var/www/www.example.com:cached
      - vendor:/var/www/www.example.com/vendor
      - node_modules:/var/www/www.example.com/node_modules
    depends_on:
      - php

  node:
    image: my-laravel5.6/node:12
    build:
      context: ./
      dockerfile: ./docker/node/Dockerfile
    working_dir: /app/
    tty: true
    volumes:
      - src:/app:cached
      - node_modules:/app/node_modules/

  mysql:
    image: my-laravel5.6/mysql:5.7
    build:
      context: ./
      dockerfile: ./docker/mysql/Dockerfile
    environment:
      - MYSQL_DATABASE=mysql
      - MYSQL_ROOT_PASSWORD=development
    ports:
      - '3306:3306'
    volumes:
      - mysql-data:/var/lib/mysql
      - ./docker/mysql/example.sql:/docker-entrypoint-initdb.d/example.sql

  mailhog:
    image: mailhog/mailhog
    ports:
      - "8025:8025"

  minio:
    image: minio/minio:latest
    ports:
      - "9090:9000"
    environment:
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=minio123
    entrypoint: sh
    command: -c "
      mkdir -p /data/.minio.sys/buckets;
      cp -r /policies/* /data/.minio.sys/;
      cp -r /export/* /data/;
      /usr/bin/minio server /data;
      "
    volumes:
      - ./docker/minio/export:/export
      - ./docker/minio/policies:/policies

volumes:
  vendor:
  mysql-data:
  node_modules:
  src:
    driver_opts:
      type: none
      device: ${PWD}/src
      o: bind
